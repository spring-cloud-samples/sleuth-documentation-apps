buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "https://repo.spring.io/snapshot"
		}
		maven {
			url "https://repo.spring.io/milestone"
		}
		maven {
			url "https://repo.spring.io/libs-release-local"
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${BOOT_VERSION}"
	}
}

allprojects {
	apply plugin: 'java'
}

configure(subprojects) {

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	ext {
		systemPropsFromGradle = {
			project.gradle.startParameter.systemPropertiesArgs.entrySet().collect {
				"-D${it.key}=${it.value}"
			}
		}
		buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "1.0.0.SLEUTH_DOCS"
	}

	group = 'io.spring.cloud.sleuth.docs'
	version = buildNrLoc
	sourceCompatibility = '1.8'

	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven {
			url "https://repo.spring.io/snapshot"
		}
		maven {
			url "https://repo.spring.io/milestone"
		}
		maven {
			url "https://repo.spring.io/libs-release-local"
		}
	}

	dependencyManagement {
		Closure<String> getProp = { String propName ->
			System.properties[propName] ?:
					project.gradle.startParameter.systemPropertiesArgs.get(propName) ?:
							hasProperty(propName) ? property(propName) :
									System.getenv(propName) ?: project.getProperty(propName) ?: ""
		}
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${getProp("BOM_VERSION")}"
		}
	}

	wrapper {
		gradleVersion '4.6'
	}

	bootRun {
		jvmArgs = systemPropsFromGradle()
	}

	test {
		jvmArgs systemPropsFromGradle()
		testLogging {
			exceptionFormat = 'full'
			showStandardStreams = true
		}
	}

}

configure(subprojects) {
	task allDeps(type: DependencyReportTask) {}
}

configure(subprojects - project(':acceptance-tests')) {

	dependencies {
		compile "org.springframework.boot:spring-boot-starter-web"
		compile "org.springframework.cloud:spring-cloud-starter-zipkin"
		compile "org.springframework.amqp:spring-rabbit"
		compile "org.springframework.boot:spring-boot-starter-actuator"
		compile "org.aspectj:aspectjrt"
		// for JSON logging
		runtime('net.logstash.logback:logstash-logback-encoder:5.0') {
			exclude group: "ch.qos.logback", module: "logback-core"
		}

		runtime 'org.aspectj:aspectjweaver'
	}

}

configure(project(":acceptance-tests")) {
	apply plugin: 'groovy'

	bootJar {
		enabled = false
	}
	jar {
		enabled = true
	}

	bootRun {
		enabled = false
	}

	dependencies {
		compile "org.aspectj:aspectjrt:1.8.8"
		compile "org.springframework.boot:spring-boot-starter-web"
		compile 'org.codehaus.groovy:groovy-all'

		testCompile 'org.awaitility:awaitility:2.0.0'
		testCompile "org.springframework.boot:spring-boot-starter-test"
		testCompile "org.springframework:spring-web"
		testCompile "org.springframework.boot:spring-boot-starter-web"
		testCompile "org.springframework.cloud:spring-cloud-starter-sleuth"
		testCompile "io.zipkin.java:zipkin:2.10.0"
		testCompile('com.athaydes:spock-reports:1.2.13') {
			transitive = false // this avoids affecting your version of Groovy/Spock
		}
		testCompile "org.spockframework:spock-spring:1.1-groovy-2.4"
	}

	test {
		exclude '**/*.*'
	}

	task acceptanceTests(type: Test) {
		jvmArgs systemPropsFromGradle()
		testLogging {
			exceptionFormat = 'full'
			showStandardStreams = true
		}
		include '**/*.*'

		group = "Verification"
		description = "Runs the acceptance tests"
	}
}

String getProp(String propName) {
	return System.properties[propName] ?:
			project.gradle.startParameter.systemPropertiesArgs.get(propName) ?:
					hasProperty(propName) ? property(propName) :
							System.getenv(propName) ?: ""
}
